import { describe, test, expect, jest, beforeEach, afterEach } from '@jest/globals';
import { FigmaMCPServer } from '../../src/mcp-server.js';
import { FigmaWebSocketServer } from '../../src/websocket/websocket-server.js';
import { DEFAULT_CONFIG } from '../../src/types/index.js';

describe('Variable System Integration', () => {
  let mcpServer: FigmaMCPServer;
  let wsServer: FigmaWebSocketServer;
  let mockPluginResponse: any;

  beforeEach(async () => {
    // Create test configuration
    const testConfig = {
      ...DEFAULT_CONFIG,
      port: 8766, // Use different port for tests
      heartbeatInterval: 1000
    };

    // Initialize servers
    wsServer = new FigmaWebSocketServer(testConfig);
    mcpServer = new FigmaMCPServer(testConfig);

    // Mock plugin responses
    mockPluginResponse = {
      success: true,
      data: {}
    };

    // Mock the sendToPlugin method to simulate plugin communication
    jest.spyOn(wsServer, 'sendToPlugin').mockImplementation(async () => mockPluginResponse);
  });

  afterEach(async () => {
    await mcpServer.stop();
    await wsServer.stop();
  });

  describe('Variable Collection Lifecycle', () => {
    test('should create, update, and delete variable collection', async () => {
      // Test collection creation
      mockPluginResponse = {
        success: true,
        data: {
          collectionId: 'collection-1',
          name: 'Test Colors',
          modes: [{ id: 'mode-1', name: 'Light' }],
          defaultModeId: 'mode-1'
        }
      };

      const handlerRegistry = mcpServer.getHandlerRegistry();
      const createResult = await handlerRegistry.handle('manage_collections', {
        operation: 'create',
        collectionName: 'Test Colors',
        modes: ['Light', 'Dark']
      });

      expect(createResult.isError).toBe(false);
      expect(createResult.content[0].text).toContain('Test Colors');

      // Test collection update
      mockPluginResponse = {
        success: true,
        data: {
          collectionId: 'collection-1',
          name: 'Updated Colors',
          description: 'Updated description'
        }
      };

      const updateResult = await handlerRegistry.handle('manage_collections', {
        operation: 'update',
        collectionId: 'collection-1',
        collectionName: 'Updated Colors',
        description: 'Updated description'
      });

      expect(updateResult.isError).toBe(false);
      expect(updateResult.content[0].text).toContain('Updated Colors');

      // Test collection deletion
      mockPluginResponse = {
        success: true,
        data: {
          deletedCollectionId: 'collection-1',
          deletedName: 'Updated Colors'
        }
      };

      const deleteResult = await handlerRegistry.handle('manage_collections', {
        operation: 'delete',
        collectionId: 'collection-1'
      });

      expect(deleteResult.isError).toBe(false);
      expect(deleteResult.content[0].text).toContain('deletedCollectionId');
    });

    test('should handle mode management operations', async () => {
      // Add mode
      mockPluginResponse = {
        success: true,
        data: {
          collectionId: 'collection-1',
          modeId: 'mode-2',
          modeName: 'Dark',
          totalModes: 2
        }
      };

      const handlerRegistry = mcpServer.getHandlerRegistry();
      const addModeResult = await handlerRegistry.handle('manage_collections', {
        operation: 'add_mode',
        collectionId: 'collection-1',
        newModeName: 'Dark'
      });

      expect(addModeResult.isError).toBe(false);
      expect(addModeResult.content[0].text).toContain('Dark');

      // Rename mode
      mockPluginResponse = {
        success: true,
        data: {
          collectionId: 'collection-1',
          modeId: 'mode-2',
          oldName: 'Dark',
          newName: 'Dark Theme'
        }
      };

      const renameResult = await handlerRegistry.handle('manage_collections', {
        operation: 'rename_mode',
        collectionId: 'collection-1',
        modeId: 'mode-2',
        newModeName: 'Dark Theme'
      });

      expect(renameResult.isError).toBe(false);
      expect(renameResult.content[0].text).toContain('Dark Theme');
    });
  });

  describe('Variable Management Lifecycle', () => {
    test('should create, update, and delete variables', async () => {
      // Create variable
      mockPluginResponse = {
        success: true,
        data: {
          variableId: 'var-1',
          name: 'Primary Blue',
          type: 'COLOR',
          collectionId: 'collection-1'
        }
      };

      const handlerRegistry = mcpServer.getHandlerRegistry();
      const createResult = await handlerRegistry.handle('manage_variables', {
        operation: 'create',
        collectionId: 'collection-1',
        variableName: 'Primary Blue',
        variableType: 'COLOR',
        modeValues: { light: '#0066CC', dark: '#4A9EFF' }
      });

      expect(createResult.isError).toBe(false);
      expect(createResult.content[0].text).toContain('Primary Blue');

      // Update variable
      mockPluginResponse = {
        success: true,
        data: {
          variableId: 'var-1',
          name: 'Updated Primary Blue',
          type: 'COLOR'
        }
      };

      const updateResult = await handlerRegistry.handle('manage_variables', {
        operation: 'update',
        variableId: 'var-1',
        variableName: 'Updated Primary Blue'
      });

      expect(updateResult.isError).toBe(false);
      expect(updateResult.content[0].text).toContain('Updated Primary Blue');

      // Delete variable
      mockPluginResponse = {
        success: true,
        data: {
          deletedVariableId: 'var-1',
          deletedName: 'Updated Primary Blue'
        }
      };

      const deleteResult = await handlerRegistry.handle('manage_variables', {
        operation: 'delete',
        variableId: 'var-1'
      });

      expect(deleteResult.isError).toBe(false);
      expect(deleteResult.content[0].text).toContain('deletedVariableId');
    });

    test('should handle variable binding operations', async () => {
      // Bind variable to node
      mockPluginResponse = {
        success: true,
        data: {
          variableId: 'var-1',
          nodeId: 'node-1',
          property: 'fills',
          variableType: 'COLOR'
        }
      };

      const handlerRegistry = mcpServer.getHandlerRegistry();
      const bindResult = await handlerRegistry.handle('manage_variables', {
        operation: 'bind',
        variableId: 'var-1',
        nodeId: 'node-1',
        property: 'fills'
      });

      expect(bindResult.isError).toBe(false);
      expect(bindResult.content[0].text).toContain('fills');

      // Unbind variable from node
      mockPluginResponse = {
        success: true,
        data: {
          nodeId: 'node-1',
          property: 'fills',
          message: 'Successfully unbound variable'
        }
      };

      const unbindResult = await handlerRegistry.handle('manage_variables', {
        operation: 'unbind',
        nodeId: 'node-1',
        property: 'fills'
      });

      expect(unbindResult.isError).toBe(false);
      expect(unbindResult.content[0].text).toContain('unbound');
    });

    test('should get variable bindings by node and by variable', async () => {
      const handlerRegistry = mcpServer.getHandlerRegistry();

      // Get bindings by node
      mockPluginResponse = {
        success: true,
        data: {
          nodeId: 'node-1',
          nodeName: 'Test Rectangle',
          bindings: [
            { type: 'node', property: 'fills', variableId: 'var-1' },
            { type: 'node', property: 'width', variableId: 'var-2' }
          ],
          totalBindings: 2
        }
      };

      const nodeBindingsResult = await handlerRegistry.handle('manage_variables', {
        operation: 'get_bindings',
        nodeId: 'node-1'
      });

      expect(nodeBindingsResult.isError).toBe(false);
      expect(nodeBindingsResult.content[0].text).toContain('Test Rectangle');

      // Get bindings by variable
      mockPluginResponse = {
        success: true,
        data: {
          variableId: 'var-1',
          variableName: 'Primary Blue',
          bindings: [
            { type: 'node', nodeId: 'node-1', property: 'fills' },
            { type: 'style', styleId: 'style-1', property: 'paints' }
          ],
          totalBindings: 2
        }
      };

      const variableBindingsResult = await handlerRegistry.handle('manage_variables', {
        operation: 'get_bindings',
        variableId: 'var-1'
      });

      expect(variableBindingsResult.isError).toBe(false);
      expect(variableBindingsResult.content[0].text).toContain('Primary Blue');
    });
  });

  describe('Error Handling', () => {
    test('should handle plugin connection errors', async () => {
      // Mock connection failure
      jest.spyOn(wsServer, 'sendToPlugin').mockRejectedValue(
        new Error('Plugin not connected')
      );

      const handlerRegistry = mcpServer.getHandlerRegistry();
      await expect(handlerRegistry.handle('manage_variables', {
        operation: 'create',
        collectionId: 'collection-1',
        variableName: 'Test Var',
        variableType: 'COLOR'
      })).rejects.toThrow('Plugin not connected');
    });

    test('should handle plugin operation failures', async () => {
      mockPluginResponse = {
        success: false,
        error: 'Variable collection not found'
      };

      const handlerRegistry = mcpServer.getHandlerRegistry();
      await expect(handlerRegistry.handle('manage_variables', {
        operation: 'create',
        collectionId: 'invalid-id',
        variableName: 'Test Var',
        variableType: 'COLOR'
      })).rejects.toThrow('Variable collection not found');
    });

    test('should validate schema before sending to plugin', async () => {
      const handlerRegistry = mcpServer.getHandlerRegistry();

      // Test invalid operation
      await expect(handlerRegistry.handle('manage_variables', {
        operation: 'invalid_operation'
      })).rejects.toThrow();

      // Test missing required parameters
      await expect(handlerRegistry.handle('manage_variables', {
        operation: 'create'
      })).rejects.toThrow('collectionId, variableName, and variableType are required');
    });
  });

  describe('Full Workflow Integration', () => {
    test('should complete end-to-end variable system workflow', async () => {
      const handlerRegistry = mcpServer.getHandlerRegistry();

      // 1. Create collection
      mockPluginResponse = {
        success: true,
        data: { collectionId: 'collection-1', name: 'Design Tokens' }
      };

      await handlerRegistry.handle('manage_collections', {
        operation: 'create',
        collectionName: 'Design Tokens',
        modes: ['Light', 'Dark']
      });

      // 2. Create variables
      mockPluginResponse = {
        success: true,
        data: { variableId: 'var-1', name: 'Primary Color' }
      };

      await handlerRegistry.handle('manage_variables', {
        operation: 'create',
        collectionId: 'collection-1',
        variableName: 'Primary Color',
        variableType: 'COLOR',
        modeValues: { Light: '#0066CC', Dark: '#4A9EFF' }
      });

      // 3. Bind variable to node
      mockPluginResponse = {
        success: true,
        data: { variableId: 'var-1', nodeId: 'node-1', property: 'fills' }
      };

      await handlerRegistry.handle('manage_variables', {
        operation: 'bind',
        variableId: 'var-1',
        nodeId: 'node-1',
        property: 'fills'
      });

      // 4. Verify bindings
      mockPluginResponse = {
        success: true,
        data: {
          nodeId: 'node-1',
          bindings: [{ property: 'fills', variableId: 'var-1' }],
          totalBindings: 1
        }
      };

      const bindingsResult = await handlerRegistry.handle('manage_variables', {
        operation: 'get_bindings',
        nodeId: 'node-1'
      });

      expect(bindingsResult.isError).toBe(false);
      expect(bindingsResult.content[0].text).toContain('totalBindings: 1');

      // All operations should have completed successfully
      expect(true).toBe(true); // Test completed without throwing
    });
  });
});